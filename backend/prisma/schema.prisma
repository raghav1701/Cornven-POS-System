generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  tenants       Tenant[]
  allocations   Rental[]       @relation("AllocatedBy")
  inventoryLogs InventoryLog[]
  receivedPayments Payment[] 
  salesProcessed    Sale[]
}

model Tenant {
  id           String   @id @default(uuid())
  userId       String   @unique
  businessName String
  address      String?
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // relations
  user     User      @relation(fields: [userId], references: [id])
  rentals  Rental[]
  products Product[]
  sales    Sale[]
}

model Cube {
  id            String     @id @default(uuid())
  code          String     @unique
  size          String
  pricePerDay Float
  status        CubeStatus @default(AVAILABLE)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  // relations
  rentals Rental[]
}

model Rental {
  id            String       @id @default(uuid())
  tenantId      String
  cubeId        String
  startDate     DateTime
  endDate       DateTime
  status        RentalStatus @default(ACTIVE)
  dailyRent   Float
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  allocatedById String

  // relations
  tenant      Tenant @relation(fields: [tenantId], references: [id])
  cube        Cube   @relation(fields: [cubeId], references: [id])
  allocatedBy User   @relation("AllocatedBy", fields: [allocatedById], references: [id])
  payments      Payment[]
  paymentReminders PaymentReminder[] 
}

model Product {
  id          String   @id @default(uuid())
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  tenantId    String
  name        String
  description String?
  category    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  logs     InventoryLog[]
  variants ProductVariant[]
  saleItems  SaleItem[]
}

enum BarcodeType {
  CODE128
  EAN13
  QR      
}

enum InventoryChangeType {
  SUBMISSION
  STOCK_UPDATE
  PRICE_UPDATE
  APPROVAL
  VARIANT_CREATE
  VARIANT_STOCK_UPDATE
  VARIANT_PRICE_UPDATE
  VARIANT_STATUS_UPDATE 
  SALE  
}

model ProductVariant {
  id         String   @id @default(uuid())
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String
  color      String
  size       String
  price      Float
  stock      Int
  lowStockThreshold Int @default(5)
  barcode    String   @unique      
  barcodeType BarcodeType @default(CODE128) 
  status      VariantStatus @default(PENDING)
  imageKey    String?    
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  @@unique([productId, color, size])

  saleItems  SaleItem[]
}



model InventoryLog {
  id            String              @id @default(uuid())
  product       Product             @relation(fields: [productId], references: [id])
  productId     String
  productVariantId String?
  user          User                @relation(fields: [userId], references: [id])
  userId        String
  changeType    InventoryChangeType
  previousValue String? 
  newValue      String? 
  createdAt     DateTime            @default(now())

  @@index([productId])
  @@index([productVariantId])
}

model Payment {
  id            String        @id @default(uuid())
  rental        Rental        @relation(fields: [rentalId], references: [id], onDelete: Cascade)
  rentalId      String
  amount        Float
  method        PaymentMethod
  paidAt        DateTime      @default(now())
  receivedBy    User?         @relation(fields: [receivedById], references: [id])
  receivedById  String?
  note          String?
  createdAt     DateTime      @default(now())

  @@index([rentalId])
  @@index([receivedById])
}

enum PaymentMethod {
  CASH
  CARD
  BANK_TRANSFER
  UPI
  OTHER
}


enum VariantStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Role {
  ADMIN
  STAFF
  TENANT
  ACCOUNTANT
}

enum CubeStatus {
  AVAILABLE
  RENTED
  MAINTENANCE
}

enum RentalStatus {
  ACTIVE
  UPCOMING
  EXPIRED
}

enum SaleStatus {
  PENDING
  COMPLETED
  VOIDED    
}

enum SalePaymentStatus {
  AUTHORIZED
  CAPTURED
  FAILED
}

model Sale {
  id              String        @id @default(uuid())
  tenantId        String
  cashierUserId   String?       // who processed the sale
  currency        String        @default("AUD")

  subtotalCents   Int
  discountCents   Int           @default(0)
  taxCents        Int           @default(0)
  totalCents      Int

  status          SaleStatus    @default(COMPLETED)
  note            String?
  idempotencyKey  String?       @unique

  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // relations
  tenant          Tenant        @relation(fields: [tenantId], references: [id])
  cashier         User?         @relation(fields: [cashierUserId], references: [id])
  items           SaleItem[]
  payments        SalePayment[]

  @@index([tenantId, createdAt])
}

model SaleItem {
  id               String          @id @default(uuid())
  saleId           String
  productId        String
  variantId        String
  quantity         Int

  // Store prices at time of sale (AUD cents)
  unitPriceCents   Int
  discountCents    Int             @default(0)
  taxCents         Int             @default(0)
  lineTotalCents   Int

  // Audit copies (denormalized for fast receipts)
  barcode          String?
  productName      String
  variantName      String

  createdAt        DateTime        @default(now())

  sale             Sale            @relation(fields: [saleId], references: [id])
  product          Product         @relation(fields: [productId], references: [id])
  variant          ProductVariant  @relation(fields: [variantId], references: [id])

  @@index([saleId])
  @@index([variantId])
}

model SalePayment {
  id             String            @id @default(uuid())
  saleId         String
  method         PaymentMethod
  status         SalePaymentStatus
  amountCents    Int

  // gateway references (for card/Stripe later; can be null for cash)
  provider       String?
  providerIntent String?
  providerCharge String?
  failureReason  String?

  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  sale           Sale              @relation(fields: [saleId], references: [id])

  @@index([saleId])
}

model PaymentReminder {
  id           String              @id @default(uuid())
  rentalId     String
  reminderType PaymentReminderType
  dueDate      DateTime            // The due date this reminder is for
  sentAt       DateTime            @default(now())
  emailSent    Boolean             @default(false)
  createdAt    DateTime            @default(now())

  // relations
  rental       Rental              @relation(fields: [rentalId], references: [id], onDelete: Cascade)

  // Prevent duplicate reminders for same rental + type + due date
  @@unique([rentalId, reminderType, dueDate])
  @@index([rentalId])
  @@index([dueDate])
}

enum PaymentReminderType {
  SEVEN_DAY_ADVANCE
  ONE_DAY_DUE
  OVERDUE
}
