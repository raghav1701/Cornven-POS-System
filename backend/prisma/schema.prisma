generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  tenants       Tenant[]
  allocations   Rental[]       @relation("AllocatedBy")
  inventoryLogs InventoryLog[]
  receivedPayments Payment[] 
}

model Tenant {
  id           String   @id @default(uuid())
  userId       String   @unique
  businessName String
  address      String?
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // relations
  user     User      @relation(fields: [userId], references: [id])
  rentals  Rental[]
  products Product[]
}

model Cube {
  id            String     @id @default(uuid())
  code          String     @unique
  size          String
  pricePerMonth Float
  status        CubeStatus @default(AVAILABLE)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  // relations
  rentals Rental[]
}

model Rental {
  id            String       @id @default(uuid())
  tenantId      String
  cubeId        String
  startDate     DateTime
  endDate       DateTime
  status        RentalStatus @default(ACTIVE)
  monthlyRent   Float
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  allocatedById String

  // relations
  tenant      Tenant @relation(fields: [tenantId], references: [id])
  cube        Cube   @relation(fields: [cubeId], references: [id])
  allocatedBy User   @relation("AllocatedBy", fields: [allocatedById], references: [id])
  payments      Payment[] 
}

model Product {
  id          String        @id @default(uuid())
  tenant      Tenant        @relation(fields: [tenantId], references: [id])
  tenantId    String
  name        String
  description String?
  price       Float
  stock       Int
  category    String?
  sku         String?       @unique
  status      ProductStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  logs InventoryLog[]
  variants   ProductVariant[]
}

model ProductVariant {
  id         String   @id @default(uuid())
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String
  color      String
  size       String
  price      Float
  stock      Int
  sku        String?  @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([productId, color, size])  // one price/stock per color+size
}


model InventoryLog {
  id            String              @id @default(uuid())
  product       Product             @relation(fields: [productId], references: [id])
  productId     String
  productVariantId String?
  user          User                @relation(fields: [userId], references: [id])
  userId        String
  changeType    InventoryChangeType
  previousValue String? // e.g. old stock or price
  newValue      String? // e.g. new stock or price
  createdAt     DateTime            @default(now())

  @@index([productId])
  @@index([productVariantId])
}

model Payment {
  id            String        @id @default(uuid())
  rental        Rental        @relation(fields: [rentalId], references: [id], onDelete: Cascade)
  rentalId      String
  amount        Float
  method        PaymentMethod
  paidAt        DateTime      @default(now())
  receivedBy    User?         @relation(fields: [receivedById], references: [id])
  receivedById  String?
  note          String?
  createdAt     DateTime      @default(now())

  @@index([rentalId])
  @@index([receivedById])
}

enum PaymentMethod {
  CASH
  CARD
  BANK_TRANSFER
  UPI
  OTHER
}


enum ProductStatus {
  PENDING
  APPROVED
  REJECTED
}

enum InventoryChangeType {
  SUBMISSION
  STOCK_UPDATE
  PRICE_UPDATE
  APPROVAL
  VARIANT_CREATE
  VARIANT_STOCK_UPDATE
  VARIANT_PRICE_UPDATE
}

enum Role {
  ADMIN
  STAFF
  TENANT
  ACCOUNTANT
}

enum CubeStatus {
  AVAILABLE
  RENTED
  MAINTENANCE
}

enum RentalStatus {
  ACTIVE
  UPCOMING
  EXPIRED
}
